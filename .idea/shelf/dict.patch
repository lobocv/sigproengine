Index: src/gain.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/gain.cpp	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/gain.cpp	(revision )
@@ -12,6 +12,7 @@
 
 
 namespace np = boost::python::numpy;
+namespace bp = boost::python;
 
 const char* Gain::getName() {
     return "Gain";
@@ -38,13 +39,13 @@
 
 
 
-boost::property_tree::ptree Gain::json_save() {
-    boost::property_tree::ptree root, params;
+bp::dict Gain::json_save() {
+    bp::dict root, params;
 
-    params.put("points_per_trace", this->points_per_trace);
-    params.put("gain", this->gain);
-    params.put("enabled", this->enabled);
-    root.add_child("Gain", params);
+    params["points_per_trace"] = this->points_per_trace;
+    params["gain"] = this->gain;
+    params["enabled"] = this->enabled;
+    root["Gain"] = params;
 
     return root;
 
Index: src/gain.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/gain.h	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/gain.h	(revision )
@@ -19,7 +19,7 @@
 
         void setup(int points_per_trace, float gain, bool enabled=true);
         virtual void apply(np::ndarray inData, np::ndarray outData);
-        boost::property_tree::ptree json_save();
+        bp::dict json_save();
         void json_load(boost::property_tree::ptree params);
 
 };
\ No newline at end of file
Index: src/processingchain.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/processingchain.h	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/processingchain.h	(revision )
@@ -22,7 +22,7 @@
 
 
 
-class ProcessingChain {
+class ProcessingChain : public Process {
 
     public:
         std::vector<std::reference_wrapper<Process>> processes;
@@ -31,7 +31,7 @@
         void clear();
         void apply(np::ndarray inData);
         void apply(np::ndarray inData, np::ndarray outData);
-        std::string json_save();
+        boost::property_tree::ptree json_save();
         void json_load(std::string);
 
     private:
\ No newline at end of file
Index: src/process.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/process.h	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/process.h	(revision )
@@ -21,7 +21,7 @@
         virtual bool isInitialized(Process* p);
         virtual void apply(np::ndarray inData, np::ndarray outData);
         virtual void apply(np::ndarray inData);
-        virtual boost::property_tree::ptree json_save();
+        virtual bp::dict json_save();
         virtual void json_load(boost::property_tree::ptree params);
 
 
\ No newline at end of file
Index: src/processingchain.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/processingchain.cpp	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/processingchain.cpp	(revision )
@@ -44,7 +44,7 @@
 
 }
 
-std::string ProcessingChain::json_save() {
+boost::property_tree::ptree ProcessingChain::json_save() {
     boost::property_tree::ptree chain, process, prolist;
     std::vector<std::reference_wrapper<Process>> processes = this->processes;
     std::string json;
@@ -62,7 +62,7 @@
     json = sstream.str();
 
     std::cout << "Done Calling Processing Chain JSON Serialize" << std::endl;
-    return json;
+    return chain;
 
 }
 
\ No newline at end of file
Index: src/sigproengine.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sigproengine.cpp	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/sigproengine.cpp	(revision )
@@ -57,11 +57,17 @@
     Py_Initialize();
     np::initialize();
 
+    // Pointer to in-place apply function in the base class
+    void (Process::*ptr_gain_apply)(np::ndarray) = &Process::apply;
+
+    class_<Process>("Process", init<>());
+
+
     // To expose overloaded functions, we must create pointers to each overloaded function and pass them to .def()
     void (ProcessingChain::*ptr_apply_to)(np::ndarray, np::ndarray) = &ProcessingChain::apply;
     void (ProcessingChain::*ptr_apply)(np::ndarray) = &ProcessingChain::apply;
 
-    class_<ProcessingChain>("ProcessingChain", init<>())
+    class_<ProcessingChain, bases<Process>>("ProcessingChain", init<>())
         .def("add_process", &ProcessingChain::add_process)
         .def("json_save", &ProcessingChain::json_save)
         .def("json_load", &ProcessingChain::json_load)
@@ -69,12 +75,6 @@
         .def("apply", ptr_apply)
         .def("clear", &ProcessingChain::clear)
         ;
-
-
-    // Pointer to in-place apply function in the base class
-    void (Process::*ptr_gain_apply)(np::ndarray) = &Process::apply;
-
-    class_<Process>("Process", init<>());
 
 
     void (Gain::*ptr_gain_apply_to)(np::ndarray, np::ndarray) = &Gain::apply;
Index: src/process.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/process.cpp	(revision a732857aa716b09152238ac545428c663da7282a)
+++ src/process.cpp	(revision )
@@ -9,6 +9,7 @@
 
 
 namespace np = boost::python::numpy;
+namespace bp = boost::python;
 
 const char* Process::getName() {
     return "Un-named Process";
@@ -40,11 +41,11 @@
     return Process::apply(inData, inData);
 }
 
-boost::property_tree::ptree Process::json_save() {
-    boost::property_tree::ptree tree;
+bp::dict Process::json_save() {
+    bp::dict tree;
     return tree;
     };
 
-void Process::json_load(boost::property_tree::ptree params) {
-    this->setup(params.get<bool>("enabled", true));
+void Process::json_load(bp::dict params) {
+    this->setup(bp::extract<bool>params["enabled", true));
     };
